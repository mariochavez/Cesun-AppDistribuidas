// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Cesun.WS.Client.localhost {
    
    
    /// <remarks/>
    /// <remarks>
///Servidor de prueba
///</remarks>
    [System.Web.Services.WebServiceBinding(Name="ServidorSoap", Namespace="http://www.cesun.edu")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Servidor : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SumaOperationCompleted;
        
        private System.Threading.SendOrPostCallback MultiplicacionOperationCompleted;
        
        public Servidor() {
            this.Url = "http://localhost:8080/Servidor.asmx";
        }
        
        public Servidor(string url) {
            this.Url = url;
        }
        
        public event SumaCompletedEventHandler SumaCompleted;
        
        public event MultiplicacionCompletedEventHandler MultiplicacionCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.cesun.edu/Suma", RequestNamespace="http://www.cesun.edu", ResponseNamespace="http://www.cesun.edu", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int Suma(int a, int b) {
            object[] results = this.Invoke("Suma", new object[] {
                        a,
                        b});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginSuma(int a, int b, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Suma", new object[] {
                        a,
                        b}, callback, asyncState);
        }
        
        public int EndSuma(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void SumaAsync(int a, int b) {
            this.SumaAsync(a, b, null);
        }
        
        public void SumaAsync(int a, int b, object userState) {
            if ((this.SumaOperationCompleted == null)) {
                this.SumaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSumaCompleted);
            }
            this.InvokeAsync("Suma", new object[] {
                        a,
                        b}, this.SumaOperationCompleted, userState);
        }
        
        private void OnSumaCompleted(object arg) {
            if ((this.SumaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SumaCompleted(this, new SumaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.cesun.edu/Multiplicacion", RequestNamespace="http://www.cesun.edu", ResponseNamespace="http://www.cesun.edu", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int Multiplicacion(int a, int b) {
            object[] results = this.Invoke("Multiplicacion", new object[] {
                        a,
                        b});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginMultiplicacion(int a, int b, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Multiplicacion", new object[] {
                        a,
                        b}, callback, asyncState);
        }
        
        public int EndMultiplicacion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void MultiplicacionAsync(int a, int b) {
            this.MultiplicacionAsync(a, b, null);
        }
        
        public void MultiplicacionAsync(int a, int b, object userState) {
            if ((this.MultiplicacionOperationCompleted == null)) {
                this.MultiplicacionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMultiplicacionCompleted);
            }
            this.InvokeAsync("Multiplicacion", new object[] {
                        a,
                        b}, this.MultiplicacionOperationCompleted, userState);
        }
        
        private void OnMultiplicacionCompleted(object arg) {
            if ((this.MultiplicacionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MultiplicacionCompleted(this, new MultiplicacionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    public partial class SumaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SumaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void SumaCompletedEventHandler(object sender, SumaCompletedEventArgs args);
    
    public partial class MultiplicacionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MultiplicacionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void MultiplicacionCompletedEventHandler(object sender, MultiplicacionCompletedEventArgs args);
}
